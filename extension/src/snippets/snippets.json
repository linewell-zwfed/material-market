{
  "zwSingleTable": {
    "prefix": "zwst",
    "body": [
      "import React from 'react';",
      "import { Button } from 'antd';",
      "import QueryTable, { useQueryTable } from '@linewell-components/query-table/lib/hooks';",
      "import { InputSearch, InputGroupSearch } from '@linewell-components/query-table';",
      "",
      "const SingleTable = () => {",
      "  const { tableInstance, ...tableProps } = useQueryTable('xxx');",
      "",
      "  const columns = [",
      "    {",
      "      title: 'title1',",
      "      dataIndex: 'dataIndex1',",
      "      width: 80,",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: 'title2',",
      "      dataIndex: 'dataIndex2',",
      "      width: 80,",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: 'title3',",
      "      dataIndex: 'dataIndex3',",
      "      width: 80,",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '操作',",
      "      key: 'action',",
      "      width: 120,",
      "      align: 'center',",
      "      render(record) {",
      "        return <a>操作1</a>;",
      "      }",
      "    }",
      "  ];",
      "",
      "  const renderLeftActions = (onSearch, lastSearch) => {",
      "    return <Button type=\"primary\">新增</Button>;",
      "  };",
      "",
      "  const renderSearchInput = (onSearch, lastSearch) => {",
      "    return (",
      "      <div style={{ float: 'right' }}>",
      "        <InputGroupSearch",
      "          options={[",
      "            { label: '申报号', value: 'projid' },",
      "            { label: '申报者', value: 'applicantName' },",
      "            { label: '联系电话', value: 'applicantPhone' }",
      "          ]}",
      "          normalizePattern={['noSpecialCharacter']}",
      "          selectProps={{ style: { width: 100 } }}",
      "          onSearch={search => {",
      "            onSearch({ ...lastSearch, ...search });",
      "          }}",
      "          selectChangeClearInputValue",
      "          selectChangeToggleSearch",
      "        />",
      "      </div>",
      "    );",
      "  };",
      "",
      "  return (",
      "    <div style={{ padding: 16, backgroundColor: '#fff' }}>",
      "      <QueryTable",
      "        rowKey=\"unid\"",
      "        showIndex",
      "        columns={columns}",
      "        renderLeftActions={renderLeftActions}",
      "        renderSearchInput={renderSearchInput}",
      "        {...tableProps}",
      "      />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default SingleTable;"
    ],
    "description": "简单的分页列表页面"
  },
  "zwMultiTabTable": {
    "prefix": "zwmtt",
    "body": [
      "import React, { useState } from 'react';",
      "import { Tabs, Button } from 'antd';",
      "",
      "import QueryTable, { useQueryTable } from '@linewell-components/query-table/lib/hooks';",
      "import { InputSearch, InputGroupSearch } from '@linewell-components/query-table';",
      "",
      "const TabPane = Tabs.TabPane;",
      "",
      "/** 取件状态 */",
      "export enum PickUpStatus {",
      "  /** 未取件 */",
      "  UnCompleted = '0',",
      "",
      "  /** 已取件 */",
      "  Completed = '1'",
      "}",
      "",
      "const MultiTabTable = () => {",
      "  const [activeKey, setActiveKey] = useState(PickUpStatus.UnCompleted);",
      "  const [keyword, setKeyword] = useState({ projid: '' });",
      "",
      "  const { tableInstance, ...tableProps } = useQueryTable('对应分页接口', {",
      "    params: {",
      "      hasTake: PickUpStatus.UnCompleted",
      "    }",
      "  });",
      "",
      "  const columns = [",
      "    {",
      "      title: 'title1',",
      "      dataIndex: 'dataIndex1',",
      "      width: 80,",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: 'title2',",
      "      dataIndex: 'dataIndex2',",
      "      width: 80,",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: 'title3',",
      "      dataIndex: 'dataIndex3',",
      "      width: 80,",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '操作',",
      "      key: 'action',",
      "      width: 120,",
      "      align: 'center',",
      "      render(record) {",
      "        return <a>操作1</a>;",
      "      }",
      "    }",
      "  ];",
      "",
      "  const renderLeftActions = (onSearch, lastSearch) => {",
      "    return <Button type=\"primary\">新增</Button>;",
      "  };",
      "",
      "  const renderSearchInput = (onSearch, lastSearch) => {",
      "    return (",
      "      <div style={{ float: 'right' }}>",
      "        <InputGroupSearch",
      "          value={keyword}",
      "          options={[",
      "            { label: '申报号', value: 'projid' },",
      "            { label: '申报者', value: 'applicantName' },",
      "            { label: '联系电话', value: 'applicantPhone' }",
      "          ]}",
      "          normalizePattern={['noSpecialCharacter']}",
      "          selectProps={{ style: { width: 100 } }}",
      "          onSearch={search => {",
      "            onSearch({ ...lastSearch, ...search });",
      "          }}",
      "          onChange={v => setKeyword(v)}",
      "          selectChangeClearInputValue",
      "          selectChangeToggleSearch",
      "        />",
      "      </div>",
      "    );",
      "  };",
      "",
      "  const handleChange = hasTake => {",
      "    setActiveKey(hasTake);",
      "    setKeyword({ projid: '' });",
      "    tableInstance.run({",
      "      params: {",
      "        hasTake",
      "      }",
      "    });",
      "  };",
      "",
      "  return (",
      "    <div style={{ padding: 16, backgroundColor: '#fff' }}>",
      "      <Tabs activeKey={activeKey} onChange={handleChange}>",
      "        <TabPane tab=\"待取件\" key={PickUpStatus.UnCompleted} />",
      "        <TabPane tab=\"已取件\" key={PickUpStatus.Completed} />",
      "      </Tabs>",
      "      <QueryTable",
      "        rowKey=\"unid\"",
      "        showIndex",
      "        columns={columns}",
      "        renderLeftActions={renderLeftActions}",
      "        renderSearchInput={renderSearchInput}",
      "        {...tableProps}",
      "      />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default MultiTabTable;"
    ],
    "description": "多 Tab 的分页列表页面"
  },
  "zwTableHeadTip ": {
    "prefix": "zwtht",
    "body": [
      "/* eslint-disable react-hooks/exhaustive-deps */",
      "import React, { useState, useEffect } from 'react';",
      "import { Input, Icon, Tooltip } from 'antd';",
      "import Card from '@linewell-components/card';",
      "import QueryTable, { useQueryTable } from '@linewell-components/query-table/lib/hooks';",
      "const { Search } = Input;",
      "",
      "const TableHeadTip = () => {",
      "  // .tip {",
      "  //   div::before {",
      "  //     background-color: #a4c1e2; //提示框箭头样式",
      "  //   }",
      "  //  提示框背景样式",
      "  //   div[role='tooltip'] {",
      "  //     background-color: #fff;",
      "  //     color: rgba(0, 0, 0, 0.85);",
      "  //   }",
      "  // }",
      "",
      "  const boxStyle = {",
      "    height: 58,",
      "    position: 'relative',",
      "    display: 'flex',",
      "    justifyContent: 'center',",
      "    flexDirection: 'column'",
      "  };",
      "  const iconStyle = { transform: 'scale(0.7)', position: 'absolute', color: '#1890FF', top: -2, right: -2 };",
      "",
      "  const { tableInstance, ...tableProps } = useQueryTable();",
      "",
      "  const columns = [",
      "    {",
      "      title: '事项名称',",
      "      dataIndex: 'dim01',",
      "      ellipsis: true",
      "    },",
      "    {",
      "      title: (",
      "        <div title=\"事项材料总数\">",
      "          <div>事项材料</div>",
      "          <div>总数</div>",
      "        </div>",
      "      ),",
      "      dataIndex: 'metrics01',",
      "      ellipsis: true,",
      "      align: 'right'",
      "    },",
      "    {",
      "      title: (",
      "        <div style={boxStyle} title=\"配置共享材料数\">",
      "          <Tooltip overlayClassName={styles.tip} trigger=\"click\" title=\"事项的材料中，配置了共享的材料数量\">",
      "            <Icon type=\"question-circle\" style={iconStyle} />",
      "          </Tooltip>",
      "          <div>配置共享</div>",
      "          <div>材料数</div>",
      "        </div>",
      "      ),",
      "      dataIndex: 'metrics02',",
      "      ellipsis: true,",
      "      align: 'right'",
      "    },",
      "    {",
      "      title: (",
      "        <div style={boxStyle} title=\"共享材料比\">",
      "          <Tooltip",
      "            overlayClassName={styles.tip}",
      "            trigger=\"click\"",
      "            title=\"共享材料占比=配置共享材料数 /事项材料总数 X100%\"",
      "          >",
      "            <Icon type=\"question-circle\" style={iconStyle} />",
      "          </Tooltip>",
      "          <div>共享材料比</div>",
      "        </div>",
      "      ),",
      "      dataIndex: 'metrics11',",
      "      ellipsis: true,",
      "      align: 'right',",
      "      render: val => {",
      "        return <>{val}%</>;",
      "      }",
      "    }",
      "  ];",
      "",
      "  return (",
      "    <QueryTable",
      "      style={{ backgroundColor: '#fff', padding: '0 0 0 16px' }}",
      "      showRowSelectedTotal",
      "      columns={columns}",
      "      paginationType=\"simple\"",
      "      {...tableProps}",
      "    />",
      "  );",
      "};",
      "",
      "export default TableHeadTip;"
    ],
    "description": "列表表头信息提示"
  },
  "zwOverlengthTable": {
    "prefix": "zwot",
    "body": [
      "/* eslint-disable react-hooks/exhaustive-deps */",
      "import React from 'react';",
      "import QueryTable, { useQueryTable } from '@linewell-components/query-table/lib/hooks';",
      "",
      "const OverlengthTable = () => {",
      "  const { tableInstance, ...tableProps } = useQueryTable();",
      "",
      "  const columns = [",
      "    {",
      "      title: '区域名称',",
      "      width: 80,",
      "      dataIndex: 'areaName',",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '总事项数',",
      "      width: 100,",
      "      dataIndex: 'serviceTotalNum',",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '事项材料提交方式分析',",
      "      align: 'center',",
      "      children: [",
      "        {",
      "          title: '支持邮递收取事项',",
      "          dataIndex: 'submitMaterialByPost',",
      "          align: 'center'",
      "        },",
      "        {",
      "          title: '只能窗口收取事项',",
      "          dataIndex: 'submitMaterialByWindow',",
      "          align: 'center'",
      "        },",
      "        {",
      "          title: '电子证照提交事项',",
      "          dataIndex: 'submitMaterialByLicense',",
      "          align: 'center'",
      "        }",
      "      ]",
      "    },",
      "    {",
      "      title: '审批结果领取',",
      "      align: 'center',",
      "      children: [",
      "        {",
      "          title: '只能窗口领取事项',",
      "          dataIndex: 'approvalResultsByWindow',",
      "          align: 'center'",
      "        },",
      "        {",
      "          title: '支持邮递送达事项',",
      "          dataIndex: 'approvalResultsByPost',",
      "          align: 'center'",
      "        },",
      "        {",
      "          title: '支持邮递送达和窗口领取的事项',",
      "          dataIndex: 'approvalResultsByPostWindow',",
      "          align: 'center'",
      "        },",
      "        {",
      "          title: '支持在线打印事项',",
      "          dataIndex: 'approvalResultsPrint',",
      "          align: 'center'",
      "        },",
      "        {",
      "          title: '电子证照共享事项',",
      "          dataIndex: 'approvalResultsByLicense',",
      "          align: 'center'",
      "        }",
      "      ]",
      "    },",
      "    {",
      "      title: '涉及中介服务事项',",
      "      dataIndex: 'intermediaryMatters',",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '涉及特殊环节事项',",
      "      dataIndex: 'specialLinkMatters',",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '开通预约服务事项',",
      "      dataIndex: 'bookMatters',",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '必须现场办理事项',",
      "      dataIndex: 'sceneHandleMatters',",
      "      align: 'center'",
      "    },",
      "    {",
      "      title: '支持网上支付事项',",
      "      dataIndex: 'onlinePayMatters',",
      "      align: 'center'",
      "    }",
      "  ];",
      "",
      "  return (",
      "    <QueryTable",
      "      style={{ backgroundColor: '#fff', padding: '0 0 0 16px' }}",
      "      showRowSelectedTotal",
      "      columns={columns}",
      "      paginationType=\"simple\"",
      "      scroll={{ x: 'calc(2000px + 50%)' }}",
      "      {...tableProps}",
      "    />",
      "  );",
      "};",
      "",
      "export default OverlengthTable;"
    ],
    "description": "超长表单"
  },
  "zwDetailDrawer": {
    "prefix": "zwdd",
    "body": [
      "import React, { useState } from 'react';",
      "import { Button, Drawer, PageHeader, Tabs, Statistic, Descriptions } from 'antd';",
      "",
      "import styles from './index.less';",
      "",
      "const { TabPane } = Tabs;",
      "const DetailDrawer = props => {",
      "  const [visible, setVisible] = useState(false);",
      "  const [activeKey, setActiveKey] = useState('1');",
      "",
      "  const onClose = () => setVisible(false);",
      "",
      "  const Content = ({ children, extra }) => {",
      "    return (",
      "      <div className=\"content\" style={{ display: 'flex', paddingBottom: 16 }}>",
      "        <div className=\"main\">{children}</div>",
      "        <div className=\"extra\">{extra}</div>",
      "      </div>",
      "    );",
      "  };",
      "",
      "  const extraContent = (",
      "    <div",
      "      style={{",
      "        display: 'flex',",
      "        width: 'max-content',",
      "        justifyContent: 'flex-end',",
      "        paddingRight: 20",
      "      }}",
      "    >",
      "      <Statistic",
      "        title=\"Status\"",
      "        value=\"Pending\"",
      "        style={{",
      "          marginRight: 32",
      "        }}",
      "      />",
      "      <Statistic title=\"Price\" prefix=\"$\" value={568.08} />",
      "    </div>",
      "  );",
      "",
      "  const renderContent = (column = 2) => (",
      "    <Descriptions size=\"small\" column={column}>",
      "      <Descriptions.Item label=\"Created\">Lili Qu</Descriptions.Item>",
      "      <Descriptions.Item label=\"Association\">421421</Descriptions.Item>",
      "      <Descriptions.Item label=\"Creation Time\">2017-01-10</Descriptions.Item>",
      "      <Descriptions.Item label=\"Effective Time\">2017-10-10</Descriptions.Item>",
      "      <Descriptions.Item label=\"Remarks\">Gonghu Road, Xihu District, Hangzhou, Zhejiang, China</Descriptions.Item>",
      "    </Descriptions>",
      "  );",
      "",
      "  return (",
      "    <>",
      "      <a onClick={() => setVisible(true)}>查看详情</a>",
      "      <Drawer",
      "        width=\"calc(100% - 300px)\"",
      "        title=\"详情\"",
      "        placement=\"right\"",
      "        destroyOnClose={true}",
      "        maskClosable={false}",
      "        visible={visible}",
      "        onClose={onClose}",
      "        bodyStyle={{ padding: 0, height: 'calc(100vh - 55px)', overflow: 'auto', background: '#fff' }}",
      "      >",
      "        <PageHeader",
      "          title=\"事项名称：xxx\"",
      "          extra={[",
      "            <Button key=\"1\" type=\"primary\">",
      "              Primary",
      "            </Button>",
      "          ]}",
      "          footer={",
      "            <Tabs activeKey={activeKey} onChange={setActiveKey}>",
      "              <TabPane tab=\"基本信息\" key=\"1\" />",
      "              <TabPane tab=\"表单信息\" key=\"2\" />",
      "            </Tabs>",
      "          }",
      "        >",
      "          <Content extra={extraContent}>{renderContent()}</Content>",
      "        </PageHeader>",
      "        <div className={styles.wrapper}>",
      "          <div className={styles.container}>",
      "            <div className={styles.table}>1</div>",
      "          </div>",
      "        </div>",
      "      </Drawer>",
      "    </>",
      "  );",
      "};",
      "",
      "export default DetailDrawer;"
    ],
    "description": "内容比较多的drawer"
  },
  "zwDetailModal": {
    "prefix": "zwdm",
    "body": [
      "/* eslint-disable complexity */",
      "/* eslint-disable no-unused-expressions */",
      "import React, { useState } from 'react';",
      "import { Modal, Button, Steps, Descriptions } from 'antd';",
      "",
      "const { Step } = Steps;",
      "const DetailModal = props => {",
      "  const [visible, setVisible] = useState(false);",
      "",
      "  const onClose = () => setVisible(false);",
      "",
      "  return (",
      "    <>",
      "      <a onClick={() => setVisible(true)}>查看详情</a>",
      "      <Modal",
      "        width={800}",
      "        centered",
      "        bodyStyle={{ maxHeight: 500, overflow: 'auto' }}",
      "        title=\"详情\"",
      "        visible={visible}",
      "        maskClosable={false}",
      "        destroyOnClose={true}",
      "        onCancel={onClose}",
      "        footer={[",
      "          <Button key=\"close\" onClick={onClose}>",
      "            关闭",
      "          </Button>",
      "        ]}",
      "      >",
      "        <Descriptions size=\"small\" column={2}>",
      "          <Descriptions.Item label=\"Created\">Lili Qu</Descriptions.Item>",
      "          <Descriptions.Item label=\"Association\">421421</Descriptions.Item>",
      "          <Descriptions.Item label=\"Creation Time\">2017-01-10</Descriptions.Item>",
      "          <Descriptions.Item label=\"Effective Time\">2017-10-10</Descriptions.Item>",
      "          <Descriptions.Item label=\"Remarks\">Gonghu Road, Xihu District, Hangzhou, Zhejiang, China</Descriptions.Item>",
      "        </Descriptions>",
      "      </Modal>",
      "    </>",
      "  );",
      "};",
      "",
      "export default DetailModal;"
    ],
    "description": "内容比较少的modal"
  },
  "zwReactECharts": {
    "prefix": "zwrec",
    "body": [
      "import React, { useRef } from 'react';",
      "import ReactEChartsCore from 'echarts-for-react/lib/core';",
      "import * as echarts from 'echarts';",
      "",
      "// Echarts配置文档 https://echarts.apache.org/zh/option.html#title",
      "",
      "const ReactECharts = () => {",
      "  const echartRef = useRef({});",
      "  const generateData = count => {",
      "    let baseValue = Math.random() * 1000;",
      "    let time = Number(new Date(2011, 0, 1));",
      "    let smallBaseValue;",
      "",
      "    function next(idx) {",
      "      smallBaseValue = idx % 30 === 0 ? Math.random() * 700 : smallBaseValue + Math.random() * 500 - 250;",
      "      baseValue += Math.random() * 20 - 10;",
      "      return Math.max(0, Math.round(baseValue + smallBaseValue) + 3000);",
      "    }",
      "",
      "    let categoryData = [];",
      "    let valueData = [];",
      "",
      "    for (let i = 0; i < count; i++) {",
      "      categoryData.push(echarts.format.formatTime('yyyy-MM-dd",
      "hh:mm:ss', time));",
      "      valueData.push(next(i).toFixed(2));",
      "      time += 1000;",
      "    }",
      "",
      "    return {",
      "      categoryData: categoryData,",
      "      valueData: valueData",
      "    };",
      "  };",
      "",
      "  let dataCount = 500;",
      "  let data = generateData(dataCount);",
      "",
      "  const options = {",
      "    title: {",
      "      text: echarts.format.addCommas(dataCount) + ' Data',",
      "      left: 10",
      "    },",
      "    // 右上角工具箱",
      "    toolbox: {",
      "      feature: {",
      "        dataZoom: {",
      "          yAxisIndex: false",
      "        },",
      "        saveAsImage: {",
      "          pixelRatio: 2",
      "        }",
      "      }",
      "    },",
      "    // hover提示",
      "    tooltip: {",
      "      trigger: 'axis',",
      "      axisPointer: {",
      "        type: 'shadow'",
      "      }",
      "    },",
      "    grid: {",
      "      bottom: 90",
      "    },",
      "    // 缩放工具",
      "    dataZoom: [",
      "      {",
      "        type: 'slider' || 'inside', // inside 支持滚轮缩放",
      "        start: 50,",
      "        end: 100",
      "      },",
      "      {",
      "        type: 'slider'",
      "      }",
      "    ],",
      "    // x轴配置",
      "    xAxis: {",
      "      data: data.categoryData,",
      "      silent: false,",
      "      splitLine: {",
      "        show: false",
      "      },",
      "      splitArea: {",
      "        show: false",
      "      }",
      "    },",
      "    // y轴配置",
      "    yAxis: {",
      "      splitArea: {",
      "        show: false",
      "      }",
      "    },",
      "    series: [",
      "      {",
      "        type: 'bar',",
      "        data: data.valueData,",
      "        // Set 'large' for large data amount",
      "        large: true",
      "      }",
      "    ]",
      "  };",
      "",
      "  const EventsDict = {",
      "    click: e => console.log(echartRef.current),",
      "    datazoom: e => {",
      "      let { dataZoom } = echartRef.current.getOption();",
      "      // 数据下标",
      "      let startValue = dataZoom[0].startValue;",
      "      let endValue = dataZoom[0].endValue;",
      "      // dataZoom位置百分比",
      "      let start = dataZoom[0].start;",
      "      let end = dataZoom[0].end;",
      "      console.log(startValue, endValue, start, end);",
      "    }",
      "  };",
      "",
      "  return (",
      "    <ReactEChartsCore",
      "      ref={e => {",
      "        echartRef.current = e?.getEchartsInstance(); // 获取eachrts实例",
      "      }}",
      "      echarts={echarts}",
      "      option={options}",
      "      onEvents={EventsDict}",
      "    />",
      "  );",
      "};",
      "",
      "export default ReactECharts;"
    ],
    "description": "echart for react 图表(支持 echart5)"
  },
  "zwReactECharts2": {
    "prefix": "zwrec2",
    "body": [
      "import React, { useRef, useState } from 'react';",
      "import ReactEChartsCore from 'echarts-for-react/lib/core';",
      "import { Checkbox } from 'antd';",
      "import * as echarts from 'echarts';",
      "",
      "const ReactECharts = () => {",
      "  const echartRef = useRef({});",
      "  const legend = ['邮件营销', '联盟广告', '视频广告', '直接访问', '搜索引擎'];",
      "  const [checked, setChecked] = useState(legend.slice(0, 1));",
      "",
      "  let selected = {};",
      "",
      "  for (let i of legend) {",
      "    if (checked.includes(i)) selected[i] = true;",
      "    else selected[i] = false;",
      "  }",
      "",
      "  const options = {",
      "    title: {",
      "      text: '外部绑定',",
      "      left: 10",
      "    },",
      "    // 右上角工具箱",
      "    toolbox: {",
      "      feature: {",
      "        dataZoom: {",
      "          yAxisIndex: false",
      "        },",
      "        saveAsImage: {",
      "          pixelRatio: 2",
      "        }",
      "      }",
      "    },",
      "    // 图例",
      "    legend: {",
      "      data: legend,",
      "      selected // 图例选中设置",
      "    },",
      "    // hover提示",
      "    tooltip: {",
      "      trigger: 'axis'",
      "      // axisPointer: {",
      "      //   type: 'shadow'",
      "      // }",
      "    },",
      "    grid: {",
      "      bottom: 90",
      "    },",
      "    // 缩放工具",
      "    dataZoom: [",
      "      {",
      "        type: 'inside',",
      "        start: 0,",
      "        end: 100",
      "      },",
      "      {",
      "        type: 'slider'",
      "      }",
      "    ],",
      "    // x轴配置",
      "    xAxis: {",
      "      type: 'category',",
      "      boundaryGap: true,",
      "      data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']",
      "    },",
      "    // y轴配置",
      "    yAxis: {",
      "      splitArea: {",
      "        show: false",
      "      }",
      "    },",
      "    series: [",
      "      {",
      "        name: '邮件营销',",
      "        type: 'line',",
      "        stack: '总量',",
      "        data: [120, 132, 101, 134, 90, 230, 210]",
      "      },",
      "      {",
      "        name: '联盟广告',",
      "        type: 'line',",
      "        stack: '总量',",
      "        data: [220, 182, 191, 234, 290, 330, 310]",
      "      },",
      "      {",
      "        name: '视频广告',",
      "        type: 'line',",
      "        stack: '总量',",
      "        data: [150, 232, 201, 154, 190, 330, 410]",
      "      },",
      "      {",
      "        name: '直接访问',",
      "        type: 'line',",
      "        stack: '总量',",
      "        data: [320, 332, 301, 334, 390, 330, 320]",
      "      },",
      "      {",
      "        name: '搜索引擎',",
      "        type: 'line',",
      "        stack: '总量',",
      "        data: [820, 932, 901, 934, 1290, 1330, 1320]",
      "      }",
      "    ]",
      "  };",
      "",
      "  const onChange = e => {",
      "    setChecked(e);",
      "  };",
      "",
      "  const EventsDict = {",
      "    legendselectchanged: params => {",
      "      let value = Object.keys(params.selected)",
      "        .map(item => {",
      "          if (params.selected[item]) return item;",
      "          return params.selected[item];",
      "        })",
      "        .filter(item => item);",
      "",
      "      setTimeout(() => setChecked(value), 16.6);",
      "      selected = params.selected;",
      "    }",
      "  };",
      "",
      "  return (",
      "    <>",
      "      <div style={{ textAlign: 'center' }}>",
      "        <Checkbox.Group options={legend} value={checked} onChange={onChange} />",
      "      </div>",
      "      <br />",
      "      <br />",
      "      <ReactEChartsCore",
      "        ref={e => {",
      "          echartRef.current = e?.getEchartsInstance(); // 获取eachrts实例",
      "        }}",
      "        echarts={echarts}",
      "        option={options}",
      "        onEvents={EventsDict}",
      "      />",
      "    </>",
      "  );",
      "};",
      "",
      "export default ReactECharts;"
    ],
    "description": "echart for react 图表(外部绑定)"
  },
  "zwTableSearchForm": {
    "prefix": "zwtsf",
    "body": [
      "import React, { useState } from 'react';",
      "import { Badge, Button, Input } from 'antd';",
      "import QueryTable, { useQueryTable } from '@linewell-components/query-table/lib/hooks';",
      "import QueryForm from '@linewell-components/query-table/lib/QueryForm';",
      "import { InputGroupSearch } from '@linewell-components/query-table';",
      "",
      "const { Row, Item, More } = QueryForm;",
      "",
      "const App = () => {",
      "  const { tableInstance, ...tableProps } = useQueryTable('####', {",
      "    manual: true,",
      "    hidePagination: false,",
      "    initialSorter: {",
      "      sortField: 'book_date',",
      "      sortOrder: 'DESC'",
      "    }",
      "  });",
      "  const [searchValue, setSearchValue] = useState('');",
      "",
      "  const columns = [",
      "    {",
      "      title: '部门名称',",
      "      dataIndex: 'deptName',",
      "      width: 120,",
      "      render(value) {",
      "        return value;",
      "      }",
      "    },",
      "    {",
      "      title: '事项名称',",
      "      dataIndex: 'serviceName',",
      "      sorter: true,",
      "      sortField: 'serviceName',",
      "      render(value) {",
      "        return value;",
      "      }",
      "    },",
      "    {",
      "      title: '预约人名称',",
      "      dataIndex: 'bookerName'",
      "    },",
      "    {",
      "      title: '手机号码',",
      "      dataIndex: 'phone'",
      "    },",
      "    {",
      "      title: '预约日期',",
      "      dataIndex: 'bookDate'",
      "    },",
      "    {",
      "      title: '预约号',",
      "      dataIndex: 'bookNumber',",
      "      render(value) {",
      "        return value;",
      "      }",
      "    },",
      "    {",
      "      title: '状态',",
      "      key: 'bookIsComplete',",
      "      render({ bookIsComplete, statusText }) {",
      "        return (",
      "          <>",
      "            <Badge status={bookIsComplete ? 'success' : 'error'} />",
      "            {statusText}",
      "          </>",
      "        );",
      "      }",
      "    }",
      "  ];",
      "",
      "  const renderForm = onSearch => {",
      "    return (",
      "      <QueryForm onSearch={() => onSearch({ keyword: 'sdf' })} onReset={() => onSearch({})}>",
      "        <>",
      "          <Item span={8} label=\"事项名称\">",
      "            <Input type=\"text\" placeholder=\"请输入事项名称\" />",
      "          </Item>",
      "          <Item span={8} label=\"预约日期\">",
      "            <Input type=\"text\" placeholder=\"请输入预约日期\" />",
      "          </Item>",
      "          <Item span={8} label=\"预约号\">",
      "            <Input type=\"text\" placeholder=\"请输入预约号\" />",
      "          </Item>",
      "        </>",
      "",
      "        <Row>",
      "          <Item span={8} label=\"预约人\">",
      "            <Input type=\"text\" placeholder=\"请输入预约人姓名\" />",
      "          </Item>",
      "          <Item span={8} label=\"身份证号码\">",
      "            <Input type=\"text\" placeholder=\"请输入身份证号码\" />",
      "          </Item>",
      "          <Item span={8} label=\"手机号码\">",
      "            <Input type=\"text\" placeholder=\"请输入手机号码\" />",
      "          </Item>",
      "        </Row>",
      "        <Row>",
      "          <Item span={8} label=\"预约状态\">",
      "            <Input type=\"text\" placeholder=\"请输入预约状态\" />",
      "          </Item>",
      "          <Item span={8} label=\"预约方式\">",
      "            <Input type=\"text\" placeholder=\"请输入预约方式\" />",
      "          </Item>",
      "        </Row>",
      "      </QueryForm>",
      "    );",
      "  };",
      "",
      "  const renderSearchInput = (onSearch, lastSearch) => {",
      "    return (",
      "      <InputGroupSearch",
      "        defaultValue={{ projid: '' }}",
      "        options={[",
      "          { label: '申报号', value: 'projid' },",
      "          { label: '申报者', value: 'applicantName' },",
      "          { label: '事项名称', value: 'serviceName' }",
      "        ]}",
      "        normalizePattern={['noSpecialCharacter']}",
      "        selectProps={{ style: { width: 100 } }}",
      "        onSearch={search => {",
      "          onSearch({ condition: search });",
      "        }}",
      "        selectChangeClearInputValue",
      "      />",
      "    );",
      "  };",
      "",
      "  const renderLeftActions = () => {",
      "    return (",
      "      <>",
      "        <Input value={searchValue} onChange={e => setSearchValue(e.target.value)} style={{ width: 200 }} />",
      "        &nbsp;&nbsp;",
      "        <Button type=\"primary\" onClick={handleSearch}>",
      "          search",
      "        </Button>",
      "      </>",
      "    );",
      "  };",
      "",
      "  const handleSearch = () => {",
      "    tableInstance.run({",
      "      search: {},",
      "      params: { userUnid: searchValue }",
      "    });",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <QueryTable",
      "        columns={columns}",
      "        renderForm={renderForm}",
      "        renderLeftActions={renderLeftActions}",
      "        renderSearchInput={renderSearchInput}",
      "        {...tableProps}",
      "      />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default App;"
    ],
    "description": "表格搜索表单"
  },
  "zwValidateForm": {
    "prefix": "zwvf",
    "body": [
      "import React, { useState } from 'react';",
      "import { Form, Modal, Input, Button, Row, Col, message, DatePicker } from 'antd';",
      "const { RangePicker } = DatePicker;",
      "",
      "const ValidateForm = props => {",
      "  const { form } = props;",
      "  const { getFieldDecorator, validateFields } = form;",
      "  const formItemLayout = {",
      "    labelCol: { span: 8 },",
      "    wrapperCol: { span: 16 }",
      "  };",
      "",
      "  const [visible, setVisible] = useState(false);",
      "",
      "  const onClose = () => setVisible(false);",
      "",
      "  const commit = () => {",
      "    validateFields((err, values) => {",
      "      if (!err) {",
      "        console.log(values);",
      "        message.success('提交成功');",
      "      }",
      "    });",
      "  };",
      "  return (",
      "    <>",
      "      <a onClick={() => setVisible(true)}>提交信息</a>",
      "      <Modal",
      "        centered",
      "        width={800}",
      "        bodyStyle={{ maxHeight: 500, overflow: 'auto' }}",
      "        title=\"提交信息\"",
      "        visible={visible}",
      "        maskClosable={false}",
      "        destroyOnClose={true}",
      "        onCancel={onClose}",
      "        footer={",
      "          <>",
      "            <Button type=\"primary\" key=\"commit\" onClick={commit}>",
      "              提交",
      "            </Button>",
      "            <Button key=\"close\" onClick={onClose}>",
      "              关闭",
      "            </Button>",
      "          </>",
      "        }",
      "      >",
      "        <Form>",
      "          <Row gutter={24}>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"事项名称\">",
      "                {getFieldDecorator('name', {",
      "                  rules: [{ required: true, message: '请输入事项名称' }]",
      "                })(<Input placeholder=\"请输入事项名称\" />)}",
      "              </Form.Item>",
      "            </Col>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"时间\">",
      "                {getFieldDecorator('date', {",
      "                  rules: [{ required: true, message: '请选择时间' }]",
      "                })(<RangePicker />)}",
      "              </Form.Item>",
      "            </Col>",
      "          </Row>",
      "          <Row gutter={24}>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"部门名称\">",
      "                {getFieldDecorator('dept', {",
      "                  rules: [{ required: true, message: '请输入部门名称' }]",
      "                })(<Input placeholder=\"请输入部门名称\" />)}",
      "              </Form.Item>",
      "            </Col>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"区域名称\">",
      "                {getFieldDecorator('area', {",
      "                  rules: [{ required: true, message: '请输入区域名称' }]",
      "                })(<Input placeholder=\"请输入区域名称\" />)}",
      "              </Form.Item>",
      "            </Col>",
      "          </Row>",
      "        </Form>",
      "      </Modal>",
      "    </>",
      "  );",
      "};",
      "",
      "export default Form.create()(ValidateForm);"
    ],
    "description": "验证表单"
  },
  "zwDynamicEditForm": {
    "prefix": "zwdef",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { Form, Modal, Input, Button, Row, Col, message, Table } from 'antd';",
      "",
      "const ValidateForm = props => {",
      "  const { form } = props;",
      "  const { getFieldDecorator, validateFields, setFieldsValue } = form;",
      "  const formItemLayout = {",
      "    labelCol: { span: 8 },",
      "    wrapperCol: { span: 16 }",
      "  };",
      "",
      "  const [visible, setVisible] = useState(false);",
      "  const [data, setData] = useState({ name: '张三', age: '19', grade: '77' });",
      "",
      "  const formData = [data];",
      "",
      "  useEffect(() => {",
      "    if (!visible) return;",
      "    setFieldsValue(data);",
      "  }, [visible]);",
      "",
      "  const columns = [",
      "    {",
      "      title: '姓名',",
      "      dataIndex: 'name'",
      "    },",
      "    {",
      "      title: '年龄',",
      "      dataIndex: 'age'",
      "    },",
      "    {",
      "      title: '成绩',",
      "      dataIndex: 'grade'",
      "    },",
      "    {",
      "      title: '操作',",
      "      render(value, record) {",
      "        return (",
      "          <a",
      "            onClick={() => {",
      "              setData(record);",
      "              setVisible(true);",
      "            }}",
      "          >",
      "            编辑",
      "          </a>",
      "        );",
      "      }",
      "    }",
      "  ];",
      "",
      "  const onClose = () => setVisible(false);",
      "",
      "  const commit = () => {",
      "    validateFields((err, values) => {",
      "      if (!err) {",
      "        setData(values);",
      "        message.success('修改成功');",
      "        onClose();",
      "      }",
      "    });",
      "  };",
      "  return (",
      "    <>",
      "      <Table columns={columns} dataSource={formData} />",
      "      <Modal",
      "        centered",
      "        width={800}",
      "        bodyStyle={{ maxHeight: 500, overflow: 'auto' }}",
      "        title=\"提交信息\"",
      "        visible={visible}",
      "        maskClosable={false}",
      "        destroyOnClose={true}",
      "        onCancel={onClose}",
      "        footer={",
      "          <>",
      "            <Button type=\"primary\" key=\"commit\" onClick={commit}>",
      "              提交",
      "            </Button>",
      "            <Button key=\"close\" onClick={onClose}>",
      "              关闭",
      "            </Button>",
      "          </>",
      "        }",
      "      >",
      "        <Form>",
      "          <Row gutter={24}>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"姓名\">",
      "                {getFieldDecorator('name', {",
      "                  rules: [{ required: true, message: '请输入姓名' }]",
      "                })(<Input placeholder=\"请输入姓名\" />)}",
      "              </Form.Item>",
      "            </Col>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"年龄\">",
      "                {getFieldDecorator('age', {",
      "                  rules: [{ required: true, message: '请输入年龄' }]",
      "                })(<Input placeholder=\"请输入年龄\" />)}",
      "              </Form.Item>",
      "            </Col>",
      "          </Row>",
      "          <Row gutter={24}>",
      "            <Col span={12}>",
      "              <Form.Item {...formItemLayout} label=\"成绩\">",
      "                {getFieldDecorator('grade', {",
      "                  rules: [{ required: true, message: '请输入成绩' }]",
      "                })(<Input placeholder=\"请输入成绩\" />)}",
      "              </Form.Item>",
      "            </Col>",
      "          </Row>",
      "        </Form>",
      "      </Modal>",
      "    </>",
      "  );",
      "};",
      "",
      "export default Form.create()(ValidateForm);"
    ],
    "description": "动态编辑表单"
  },
  "zwDynamicAddForm": {
    "prefix": "zwdaf",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { Form, Modal, Input, Button, Row, Col, message, Table, Icon } from 'antd';",
      "",
      "let id = 1;",
      "",
      "const DynamicAddForm = props => {",
      "  const { form } = props;",
      "  const { getFieldDecorator, setFieldsValue, validateFieldsAndScroll } = form;",
      "  const formItemLayout = {",
      "    labelCol: { span: 8 },",
      "    wrapperCol: { span: 16 }",
      "  };",
      "",
      "  const [visible, setVisible] = useState(false);",
      "  const [data, setData] = useState({ name: '张三' });",
      "  const [keys, setKeys] = useState([0]);",
      "  const [context, setContext] = useState({});",
      "",
      "  const remove = k => {",
      "    if (keys.length === 1) {",
      "      return;",
      "    }",
      "    setKeys(keys.filter(key => key !== k));",
      "  };",
      "",
      "  const add = () => {",
      "    const nextKeys = keys.concat([id++]);",
      "    setKeys(nextKeys);",
      "  };",
      "",
      "  useEffect(() => {",
      "    if (!visible) return;",
      "    if (context.record) setFieldsValue(context);",
      "    setFieldsValue({ record: [data] });",
      "  }, [visible]);",
      "",
      "  const onClose = () => {",
      "    setVisible(false);",
      "  };",
      "",
      "  const commit = () => {",
      "    validateFieldsAndScroll((err, values) => {",
      "      if (!err) {",
      "        console.log(values);",
      "        setContext(values);",
      "        onClose();",
      "      }",
      "    });",
      "  };",
      "",
      "  return (",
      "    <>",
      "      <Button type=\"primary\" onClick={() => setVisible(true)}>",
      "        新增表单",
      "      </Button>",
      "      &nbsp;&nbsp;",
      "      {JSON.stringify(context.record ? context : data)}",
      "      <Modal",
      "        centered",
      "        width={800}",
      "        bodyStyle={{ maxHeight: 500, overflow: 'auto' }}",
      "        title=\"新增\"",
      "        visible={visible}",
      "        maskClosable={false}",
      "        destroyOnClose={true}",
      "        onCancel={onClose}",
      "        footer={",
      "          <>",
      "            <Button type=\"primary\" key=\"commit\" onClick={commit}>",
      "              提交",
      "            </Button>",
      "            <Button key=\"close\" onClick={onClose}>",
      "              关闭",
      "            </Button>",
      "          </>",
      "        }",
      "      >",
      "        <Form>",
      "          <Button type=\"dashed\" onClick={add}>",
      "            新增表单",
      "          </Button>",
      "",
      "          {keys?.map((k, index) => {",
      "            return (",
      "              <Row gutter={24} key={index}>",
      "                <Col span={12}>",
      "                  <Form.Item {...formItemLayout} label={`姓名\\${k}`}>",
      "                    {getFieldDecorator(`record[\\${k}].name`, {",
      "                      rules: [{ required: true, message: '请输入姓名' }]",
      "                    })(<Input placeholder=\"请输入姓名\" />)}",
      "                  </Form.Item>",
      "                </Col>",
      "                <Col span={2}>{keys.length > 1 ? <Icon type=\"minus-circle-o\" onClick={() => remove(k)} /> : null}</Col>",
      "              </Row>",
      "            );",
      "          })}",
      "        </Form>",
      "      </Modal>",
      "    </>",
      "  );",
      "};",
      "",
      "export default Form.create()(DynamicAddForm);"
    ],
    "description": "动态新增表单"
  }
}
